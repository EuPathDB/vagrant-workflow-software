---
- hosts: all
  sudo: yes

  tasks:

      # Some resources are behind firewalls and access rules. Test early
      # that we have access to them.
#    - name: testing access to restricted URL
#      get_url: url=http://software.apidb.org/source/
#               dest=/dev/null
#               force=yes
#      changed_when: false

    - shell: env > before
      sudo: no

    - name: change sysadmin user group
      group: name="{{ wf_group }}" state=present
    - user: name="{{ sysadmin }}"
            group="{{ wf_group }}"

    - shell: env > after
      sudo: no

    - name: install zlib-devel
      yum:  name=zlib-devel
    - name: install git
      yum:  name=git

    - name: Create base directory
      file: path="{{ wf_base_dir }}"
            state=directory
            owner="{{ sysadmin }}"
            group="{{ wf_group }}"

    - name: add git host to known_hosts
      known_hosts: path="/home/{{ sysadmin }}/.ssh/known_hosts"
                   host='git.apidb.org'
                   key="{{ lookup('pipe','ssh-keyscan git.apidb.org') }}"
      sudo: no

    - name: initialize sysadmin directory
      script: init.sh "{{ wf_base_dir }}"
              creates="{{ wf_base_dir }}/sysadmin"
      sudo: no

    - name: add workflow user
      user: name="{{ wf_user }}"
            shell=/bin/bash

    - name: fetch vagrant authorized_keys
      fetch: src=/home/vagrant/.ssh/authorized_keys
             dest=staging/authorized_keys
             flat=yes

    - name: workflow user authorized_keys
      authorized_key: user="{{ wf_user }}"
                      key="{{ lookup('file', 'staging/authorized_keys') }}"

    - name: install workflow bashrc
      copy: src=workflow_bashrc
            dest="/home/{{ wf_user }}/.bashrc"
            owner="{{ wf_user }}"
            mode=0644

    - name: set shell prompt
      lineinfile: dest=/home/{{ item.user }}/.bash_profile
                  regexp="^export PS1="
                  line='export PS1="[\[$(tput setaf 1)\]\[$(tput bold)\]Simulated \[$(tput sgr0)\]\u@\h \W]\\n\[$(tput setaf 2)\]\\$ \[$(tput sgr0)\]\[$(tput sgr0)\]"'
      with_items:
        - { user: "{{ sysadmin }}" }
        - { user: "{{ wf_user }}" }

    # We change the primary group for the vagrant user earlier but Ansible's
    # persistent ssh connections means that the user does not yet know about
    # the {{ wf_group }}. This causes Puppet (workpuppet) to fail to 
    # set the group
#    - name: hack permissions
#      file: path="{{ wf_base_dir }}/workflow-software/tmp"
#            state=directory
#            owner="{{ sysadmin }}"
#            group="{{ wf_group }}"

    - name: run workpuppet
      script: runworkpuppet.sh "{{ wf_base_dir }}"
      sudo: no
      changed_when: false
